diff --git a/sfc-ovs/src/main/java/org/opendaylight/sfc/sfc_ovs/provider/SfcOvsUtil.java b/sfc-ovs/src/main/java/org/opendaylight/sfc/sfc_ovs/provider/SfcOvsUtil.java
index d58de49..689c4df 100644
--- a/sfc-ovs/src/main/java/org/opendaylight/sfc/sfc_ovs/provider/SfcOvsUtil.java
+++ b/sfc-ovs/src/main/java/org/opendaylight/sfc/sfc_ovs/provider/SfcOvsUtil.java
@@ -406,7 +406,20 @@ public class SfcOvsUtil {
     }
 
     public static ServiceFunctionForwarder augmentSffWithOpenFlowNodeId(ServiceFunctionForwarder sff) {
-        String ofNodeId = SfcOvsUtil.getOpenFlowNodeIdForSff(sff);
+        String ofNodeId = null;
+        // Check if its an service-function-forwarder-ovs augmentation
+        // if it is, then return;
+        SffOvsBridgeAugmentation ovsSff = sff.getAugmentation(SffOvsBridgeAugmentation.class);
+        if (ovsSff != null) {
+            if (ovsSff.getOvsBridge() != null) {
+                ofNodeId = ovsSff.getOvsBridge().getOpenflowNodeId();
+                if (ofNodeId != null ) {
+                     return sff;
+                }
+            }
+        }
+
+        ofNodeId = SfcOvsUtil.getOpenFlowNodeIdForSff(sff);
 
         if (ofNodeId != null) {
             SffOvsBridgeAugmentationBuilder sffOvsBrAugBuilder;
diff --git a/sfc-ovs/src/main/java/org/opendaylight/sfc/sfc_ovs/provider/api/SfcSffToOvsMappingAPI.java b/sfc-ovs/src/main/java/org/opendaylight/sfc/sfc_ovs/provider/api/SfcSffToOvsMappingAPI.java
index 6a834a0..69ec820 100644
--- a/sfc-ovs/src/main/java/org/opendaylight/sfc/sfc_ovs/provider/api/SfcSffToOvsMappingAPI.java
+++ b/sfc-ovs/src/main/java/org/opendaylight/sfc/sfc_ovs/provider/api/SfcSffToOvsMappingAPI.java
@@ -84,6 +84,11 @@ public class SfcSffToOvsMappingAPI {
             if (serviceForwarderOvsBridge != null) {
                 ovsdbBridgeBuilder.setBridgeName(new OvsdbBridgeName(serviceForwarderOvsBridge.getBridgeName()));
                 ovsdbBridgeBuilder.setBridgeUuid(serviceForwarderOvsBridge.getUuid());
+                String openflowNodeId = serviceForwarderOvsBridge.getOpenflowNodeId();
+                if (openflowNodeId != null ) {
+                    LOG.info("openflowNodeId is set on SFF {}", serviceFunctionForwarder.getName());
+                    return null;
+                }
             } else {
                 LOG.info("Cannot build OvsdbBridgeAugmentation. Missing OVS Bridge augmentation on SFF {}", serviceFunctionForwarder.getName());
                 return null;
diff --git a/sfc-py/start_agent.sh b/sfc-py/start_agent.sh
index 87d5e30..8ceb3c1 100755
--- a/sfc-py/start_agent.sh
+++ b/sfc-py/start_agent.sh
@@ -3,4 +3,4 @@
 
 # auto-sff-name means agent will try to discover its SFF name dynamically during
 # start-up and later when it receives a RSP request
-python3.4 sfc/sfc_agent.py --rest --odl-ip-port 192.168.1.5:8181 --auto-sff-name
+python3.4 sfc/sfc_agent.py --rest --odl-ip-port localhost:8181 --auto-sff-name
diff --git a/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2BaseProviderUtils.java b/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2BaseProviderUtils.java
index e168619..f634a03 100644
--- a/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2BaseProviderUtils.java
+++ b/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2BaseProviderUtils.java
@@ -21,6 +21,7 @@ import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sff.rev1407
 import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sff.rev140701.service.function.forwarders.service.function.forwarder.service.function.dictionary.SffSfDataPlaneLocator;
 import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sfg.rev150214.service.function.groups.ServiceFunctionGroup;
 import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.MacAddressLocator;
+import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.VxlanGpe;
 import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.data.plane.locator.LocatorType;
 import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.data.plane.locator.locator.type.Mac;
 import org.opendaylight.yang.gen.v1.urn.ericsson.params.xml.ns.yang.sfc.sff.ofs.rev150408.ServiceFunctionDictionary1;
@@ -267,4 +268,26 @@ public abstract class SfcL2BaseProviderUtils {
         return sff.getServiceNode();
     }
 
+    public Long getPortIdForSffFirstVxlanGpeDpl(final String sffName, long rspId) {
+        if(sffName == null) {
+            return 0L;
+        }
+
+        ServiceFunctionForwarder sff = getServiceFunctionForwarder(sffName, rspId);
+        SffDataPlaneLocator sffDpl = null;
+        Long portId = 0L;
+
+        List<SffDataPlaneLocator> sffDataPlanelocatorList = sff.getSffDataPlaneLocator();
+        for (SffDataPlaneLocator sffDataPlanelocator : sffDataPlanelocatorList) {
+            if (sffDataPlanelocator.getDataPlaneLocator().getTransport().equals(VxlanGpe.class)) {
+                OfsPort ofsPort = getSffPortInfoFromDpl(sffDataPlanelocator);
+                if (ofsPort != null) {
+                    portId = Long.valueOf(ofsPort.getPortId());
+                }
+                break;
+            }
+        }
+
+        return portId;
+    }
 }
diff --git a/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2FlowProgrammerInterface.java b/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2FlowProgrammerInterface.java
index 7cda7c1..87d59fa 100644
--- a/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2FlowProgrammerInterface.java
+++ b/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2FlowProgrammerInterface.java
@@ -62,6 +62,8 @@ public interface SfcL2FlowProgrammerInterface {
 
     public void configureArpTransportIngressFlow(final String sffNodeName, final String mac);
 
+    public void configureMetaPortIngressFlow(final String sffNodeName, final Long ofPort);
+
     //
     // Configure Table 1, Path Mapper
     //
diff --git a/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2RspProcessor.java b/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2RspProcessor.java
index 4f9254e..70bc9a7 100644
--- a/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2RspProcessor.java
+++ b/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/SfcL2RspProcessor.java
@@ -34,6 +34,7 @@ import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev14070
 import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.MplsLocator;
 import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.SlTransportType;
 import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.VxlanGpe;
+import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.data.plane.locator.locator.type.Other;
 import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.data.plane.locator.LocatorType;
 import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.data.plane.locator.locator.type.Ip;
 import org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.data.plane.locator.locator.type.IpBuilder;
@@ -530,6 +531,9 @@ public class SfcL2RspProcessor {
                 //Only support VxLAN-gpe + NSH currently
                 this.sfcL2FlowProgrammer.configureVxlanGpeTransportIngressFlow(sffNodeName);
            }
+        } else {
+            Long portId = sfcL2ProviderUtils.getPortIdForSffFirstVxlanGpeDpl(sffName, pathId);
+            this.sfcL2FlowProgrammer.configureMetaPortIngressFlow(sffNodeName, portId);
         }
 
         // The next flows will be stored with the RSP pathId
@@ -630,8 +634,6 @@ public class SfcL2RspProcessor {
                     "configureSffNextHopFlow SFF [" + sffName + "] does not exist");
         }
 
-        LOG.debug("configureSffNextHopFlow sff [{}] pathId [{}] serviceIndex [{}] srcMac [{}] dstMac [{}]",
-                sffName, pathId, serviceIndex, srcMac, dstMac);
 
         LocatorType srcSffLocatorType = (srcDpl != null) ? srcDpl.getLocatorType() : null;
         LocatorType dstSffLocatorType = (dstDpl != null) ? dstDpl.getLocatorType() : null;
@@ -641,7 +643,7 @@ public class SfcL2RspProcessor {
                         srcSffLocatorType.getImplementedInterface() :
                         dstSffLocatorType.getImplementedInterface();
 
-        if (implementedInterface.equals(Ip.class)) {
+        if (implementedInterface.equals(Ip.class) || implementedInterface.equals(Other.class)) {
             //VxLAN-gpe, it is IP/UDP flow with VLAN tag
             if(dstDpl != null) {
                 if(dstDpl.getTransport().equals(VxlanGpe.class)) {
@@ -649,6 +651,10 @@ public class SfcL2RspProcessor {
                     long nsp = pathId;
                     short nsi = serviceIndex;
                     this.sfcL2FlowProgrammer.configureVxlanGpeNextHopFlow(sffNodeName, dstIp, nsp, nsi);
+                } else if (dstDpl.getTransport().equals(org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sl.rev140701.Other.class)) {
+                    long nsp = pathId;
+                    short nsi = serviceIndex;
+                    this.sfcL2FlowProgrammer.configureVxlanGpeNextHopFlow(sffNodeName, null, nsp, nsi);
                 }
             }
         } else {
@@ -760,11 +766,10 @@ public class SfcL2RspProcessor {
                     "configureSffTransportEgressFlow Sff Node name for SFF [" + sffName + "] does not exist");
         }
 
-        LOG.debug("configureSffTransportEgressFlow sff [{}] node [{}]", sffName, sffNodeName);
-
         LocatorType hopLocatorType = hopDpl.getLocatorType();
         Class<? extends DataContainer> implementedInterface = hopLocatorType.getImplementedInterface();
 
+
         if (implementedInterface.equals(Mac.class)) {
             // Mac and possibly VLAN
             Integer vlanTag = ((MacAddressLocator) hopLocatorType).getVlanId();
@@ -786,12 +791,22 @@ public class SfcL2RspProcessor {
                 long nsp = pathId;
                 short nsi = serviceIndex;
                 this.sfcL2FlowProgrammer.configureVxlanGpeTransportEgressFlow(
-                        sffNodeName, nsp, nsi, srcOfsPort, isLastServiceIndex, doPktIn);
+                        sffNodeName, nsp, nsi, OutputPortValues.INPORT.toString(), isLastServiceIndex, doPktIn);
                 if(isLastServiceIndex) {
                     this.sfcL2FlowProgrammer.configureNshNscTransportEgressFlow(
                             sffNodeName, nsp, nsi, OutputPortValues.INPORT.toString());
                 }
            }
+        } else if (implementedInterface.equals(Other.class)) {
+           //Other, only gets the Meta Port of the OVS
+            long nsp = pathId;
+            short nsi = serviceIndex;
+            this.sfcL2FlowProgrammer.configureVxlanGpeTransportEgressFlow(
+                    sffNodeName, nsp, nsi, srcOfsPort, isLastServiceIndex, doPktIn);
+            if(isLastServiceIndex) {
+                this.sfcL2FlowProgrammer.configureNshNscTransportEgressFlow(
+                        sffNodeName, nsp, nsi, OutputPortValues.INPORT.toString());
+            }
         }
     }
 
diff --git a/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/openflow/SfcL2FlowProgrammerOFimpl.java b/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/openflow/SfcL2FlowProgrammerOFimpl.java
index d0d0123..f87c3f4 100644
--- a/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/openflow/SfcL2FlowProgrammerOFimpl.java
+++ b/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/openflow/SfcL2FlowProgrammerOFimpl.java
@@ -438,12 +438,26 @@ public class SfcL2FlowProgrammerOFimpl implements SfcL2FlowProgrammerInterface {
         }
     }
 
+    @Override
+    public void configureMetaPortIngressFlow(final String sffNodeName, final Long ofPort) {
+        ConfigureTransportIngressThread configureIngressTransportThread =
+                new ConfigureTransportIngressThread(sffNodeName, SfcOpenflowUtils.ETHERTYPE_META);
+        configureIngressTransportThread.setSffNodeMetaOfPort(ofPort);
+        configureIngressTransportThread.setNextTable(TABLE_INDEX_NEXT_HOP);
+        try {
+            threadPoolExecutorService.execute(configureIngressTransportThread);
+        } catch (Exception ex) {
+            LOG.error(LOGSTR_THREAD_QUEUE_FULL, ex.toString());
+        }
+    }
+
     private class ConfigureTransportIngressThread implements Runnable {
         String sffNodeName;
         long etherType;
         short ipProtocol;
         short nextTable;
         Long rspId;
+        Long sffNodeMetaOfPort;
 
         public ConfigureTransportIngressThread(final String sffNodeName, long etherType) {
             this.sffNodeName = sffNodeName;
@@ -455,6 +469,7 @@ public class SfcL2FlowProgrammerOFimpl implements SfcL2FlowProgrammerInterface {
 
         public void setIpProtocol(short ipProtocol) { this.ipProtocol = ipProtocol; }
         public void setNextTable(short nextTable) { this.nextTable = nextTable; }
+        public void setSffNodeMetaOfPort(Long sffNodeMetaOfPort) { this.sffNodeMetaOfPort = sffNodeMetaOfPort; }
 
         @Override
         public void run() {
@@ -477,19 +492,32 @@ public class SfcL2FlowProgrammerOFimpl implements SfcL2FlowProgrammerInterface {
                     vlanIdBuilder.setVlanIdPresent(true);
                     vlanBuilder.setVlanId(vlanIdBuilder.build());
                     match.setVlanMatch(vlanBuilder.build());
-                } else {
+                } else if (this.etherType != SfcOpenflowUtils.ETHERTYPE_META) {
                     SfcOpenflowUtils.addMatchEtherType(match, this.etherType);
                 }
 
-                //
-                // Action, goto the nextTable, defaults to Ingress table unless otherwise set
-                GoToTableBuilder gotoIngress = SfcOpenflowUtils.createActionGotoTable(getTableId(this.nextTable));
-
                 InstructionBuilder ib = new InstructionBuilder();
-                ib.setInstruction(new GoToTableCaseBuilder().setGoToTable(gotoIngress.build()).build());
-                ib.setKey(new InstructionKey(1));
-                ib.setOrder(0);
+                int flowPriority = FLOW_PRIORITY_TRANSPORT_INGRESS;
+
+                if (this.etherType != SfcOpenflowUtils.ETHERTYPE_META) {
+                    // Action, goto the nextTable, defaults to Ingress table unless otherwise set
+                    GoToTableBuilder gotoIngress = SfcOpenflowUtils.createActionGotoTable(getTableId(this.nextTable));
+                    ib.setInstruction(new GoToTableCaseBuilder().setGoToTable(gotoIngress.build()).build());
+                    ib.setKey(new InstructionKey(1));
+                } else {
+                    SfcOpenflowUtils.addMatchEtherType(match, SfcOpenflowUtils.ETHERTYPE_IPV4);
+                    SfcOpenflowUtils.addMatchIpProtocol(match, SfcOpenflowUtils.IP_PROTOCOL_UDP);
+                    SfcOpenflowUtils.addMatchDstUdpPort(match, SfcOpenflowUtils.TUNNEL_VXLANGPE_NSH_PORT);
+                    List<Action> actionList = new ArrayList<Action>();
+                    actionList.add(SfcOpenflowUtils.createActionOutPort(OutputPortValues.LOCAL.toString(), 0));
+                    ApplyActionsBuilder aab = new ApplyActionsBuilder();
+                    aab.setAction(actionList);
+                    ib.setInstruction(new ApplyActionsCaseBuilder().setApplyActions(aab.build()).build());
+                    flowPriority += 10;   /* Output to local for NSH parse */
+                    ib.setKey(new InstructionKey(0));
+                }
 
+                ib.setOrder(0);
                 // Put our Instruction in a list of Instructions
                 InstructionsBuilder isb = SfcOpenflowUtils.createInstructionsBuilder(ib);
 
@@ -498,13 +526,43 @@ public class SfcL2FlowProgrammerOFimpl implements SfcL2FlowProgrammerInterface {
                 FlowBuilder transportIngressFlow =
                         SfcOpenflowUtils.createFlowBuilder(
                                 TABLE_INDEX_INGRESS_TRANSPORT_TABLE,
-                                FLOW_PRIORITY_TRANSPORT_INGRESS,
+                                flowPriority,
                                 "ingress_Transport_Default_Flow",
                                 match,
                                 isb);
 
                 writeFlowToConfig(rspId, sffNodeName, transportIngressFlow);
 
+                /* We need another flow for IP-less VNFs */
+                if (this.etherType == SfcOpenflowUtils.ETHERTYPE_META) {
+                    MatchBuilder match1 = new MatchBuilder();
+                    InstructionBuilder ib1 = new InstructionBuilder();
+
+                    flowPriority = FLOW_PRIORITY_TRANSPORT_INGRESS + 10;
+                    SfcOpenflowUtils.addMatchSffNodeInPort(match1, sffNodeName, sffNodeMetaOfPort);
+
+                    // Action, goto the nextTable, defaults to Ingress table unless otherwise set
+                    GoToTableBuilder gotoIngress1 = SfcOpenflowUtils.createActionGotoTable(getTableId(this.nextTable));
+                    ib1.setInstruction(new GoToTableCaseBuilder().setGoToTable(gotoIngress1.build()).build());
+                    ib1.setKey(new InstructionKey(1));
+                    ib1.setOrder(0);
+
+                    // Put our Instruction in a list of Instructions
+                    InstructionsBuilder isb1 = SfcOpenflowUtils.createInstructionsBuilder(ib1);
+
+                    //
+                    // Create and configure the FlowBuilder
+                    FlowBuilder transportIngressFlow1 =
+                            SfcOpenflowUtils.createFlowBuilder(
+                                    TABLE_INDEX_INGRESS_TRANSPORT_TABLE,
+                                    flowPriority,
+                                    "ingress_Transport_Default_Flow",
+                                    match1,
+                                    isb1);
+
+                    writeFlowToConfig(rspId, sffNodeName, transportIngressFlow1);
+                }
+
             } catch (Exception e) {
                 LOG.error("ConfigureTransportIngress writer caught an Exception: ", e);
             }
@@ -944,28 +1002,32 @@ public class SfcL2FlowProgrammerOFimpl implements SfcL2FlowProgrammerInterface {
                     actionList.add(actionSetNwDst);
                 }
 
-                // Create an Apply Action
-                ApplyActionsBuilder aab = new ApplyActionsBuilder();
-                aab.setAction(actionList);
+                List<Instruction> instructions = new ArrayList<Instruction>();
 
-                GoToTableBuilder gotoTb = SfcOpenflowUtils.createActionGotoTable(TABLE_INDEX_TRANSPORT_EGRESS);
+                order = 0;
+                if (actionList.isEmpty() == false) {
+                    // Create an Apply Action
+                    ApplyActionsBuilder aab = new ApplyActionsBuilder();
+                    aab.setAction(actionList);
 
+                    // Wrap our Apply Action in an Instruction
+                    InstructionBuilder ib = new InstructionBuilder();
+                    ib.setInstruction(new ApplyActionsCaseBuilder().setApplyActions(aab.build()).build());
+                    ib.setKey(new InstructionKey(order));
+                    ib.setOrder(order);
+                    instructions.add(ib.build());
+                    order++;
+                }
+
+                GoToTableBuilder gotoTb = SfcOpenflowUtils.createActionGotoTable(TABLE_INDEX_TRANSPORT_EGRESS);
                 InstructionBuilder gotoTbIb = new InstructionBuilder();
                 gotoTbIb.setInstruction(new GoToTableCaseBuilder().setGoToTable(gotoTb.build()).build());
-                gotoTbIb.setKey(new InstructionKey(1));
-                gotoTbIb.setOrder(1);
-
-                // Wrap our Apply Action in an Instruction
-                InstructionBuilder ib = new InstructionBuilder();
-                ib.setInstruction(new ApplyActionsCaseBuilder().setApplyActions(aab.build()).build());
-                ib.setKey(new InstructionKey(0));
-                ib.setOrder(0);
+                gotoTbIb.setKey(new InstructionKey(order));
+                gotoTbIb.setOrder(order);
+                instructions.add(gotoTbIb.build());
 
                 // Put our Instruction in a list of Instructions
                 InstructionsBuilder isb = new InstructionsBuilder();
-                List<Instruction> instructions = new ArrayList<Instruction>();
-                instructions.add(ib.build());
-                instructions.add(gotoTbIb.build());
                 isb.setInstruction(instructions);
 
                 //
@@ -1142,17 +1204,19 @@ public class SfcL2FlowProgrammerOFimpl implements SfcL2FlowProgrammerInterface {
 
                 // Nsh stuff, if present
                 if (this.nshNsp >=0 && this.nshNsi >= 0) {
-                    if(this.isLastHop) {
-                        // On the last hop Copy/Move Nsi, Nsp, Nsc1=>TunIpv4Dst, and Nsc2=>TunId (Vnid)
-                        actionList.add(SfcOpenflowUtils.createActionNxMoveNsi(order++));
-                        actionList.add(SfcOpenflowUtils.createActionNxMoveNsp(order++));
-                        actionList.add(SfcOpenflowUtils.createActionNxMoveNsc1ToTunIpv4DstRegister(order++));
-                        actionList.add(SfcOpenflowUtils.createActionNxMoveNsc2ToTunIdRegister(order++));
-                    } else {
-                        // If its not the last hop, Copy/Move Nsc1/Nsc2 to the next hop
-                        actionList.add(SfcOpenflowUtils.createActionNxMoveNsc1(order++));
-                        actionList.add(SfcOpenflowUtils.createActionNxMoveNsc2(order++));
-                        actionList.add(SfcOpenflowUtils.createActionNxMoveTunIdRegister(order++));
+                    if (this.port.equals(OutputPortValues.INPORT.toString())) {
+                        if(this.isLastHop) {
+                            // On the last hop Copy/Move Nsi, Nsp, Nsc1=>TunIpv4Dst, and Nsc2=>TunId (Vnid)
+                            actionList.add(SfcOpenflowUtils.createActionNxMoveNsi(order++));
+                            actionList.add(SfcOpenflowUtils.createActionNxMoveNsp(order++));
+                            actionList.add(SfcOpenflowUtils.createActionNxMoveNsc1ToTunIpv4DstRegister(order++));
+                            actionList.add(SfcOpenflowUtils.createActionNxMoveNsc2ToTunIdRegister(order++));
+                        } else {
+                            // If its not the last hop, Copy/Move Nsc1/Nsc2 to the next hop
+                            actionList.add(SfcOpenflowUtils.createActionNxMoveNsc1(order++));
+                            actionList.add(SfcOpenflowUtils.createActionNxMoveNsc2(order++));
+                            actionList.add(SfcOpenflowUtils.createActionNxMoveTunIdRegister(order++));
+                        }
                     }
                 }
 
diff --git a/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/openflow/SfcOpenflowUtils.java b/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/openflow/SfcOpenflowUtils.java
index 73b1113..fcc00bd 100644
--- a/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/openflow/SfcOpenflowUtils.java
+++ b/sfcofl2/src/main/java/org/opendaylight/sfc/l2renderer/openflow/SfcOpenflowUtils.java
@@ -50,6 +50,7 @@ import org.opendaylight.yang.gen.v1.urn.opendaylight.inventory.rev130819.nodes.N
 import org.opendaylight.yang.gen.v1.urn.opendaylight.inventory.rev130819.nodes.NodeKey;
 import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.inventory.rev130819.FlowCapableNode;
 import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.inventory.rev130819.FlowId;
+import org.opendaylight.yang.gen.v1.urn.opendaylight.inventory.rev130819.NodeConnectorId;
 import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.inventory.rev130819.tables.table.FlowBuilder;
 import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.inventory.rev130819.tables.table.FlowKey;
 import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.FlowCookie;
@@ -143,6 +144,7 @@ import com.google.common.collect.Lists;
 import com.google.common.net.InetAddresses;
 
 public class SfcOpenflowUtils {
+    public static final int ETHERTYPE_META = 0xFFFF;
     public static final int ETHERTYPE_IPV4 = 0x0800;
     public static final int ETHERTYPE_VLAN = 0x8100;
     public static final int ETHERTYPE_MPLS_UCAST = 0x8847;
@@ -153,6 +155,7 @@ public class SfcOpenflowUtils {
     public static final int TCP_FLAG_SYN = 0x0002;
     public static final int ARP_REQUEST = 1;
     public static final int ARP_REPLY = 2;
+    public static final PortNumber TUNNEL_VXLANGPE_NSH_PORT = new PortNumber(Integer.parseInt("4790"));
 
     private static final int COOKIE_BIGINT_INT_RADIX = 10;
     private static AtomicLong flowIdInc = new AtomicLong();
@@ -193,6 +196,10 @@ public class SfcOpenflowUtils {
     // Add Match methods
     //
 
+    public static void addMatchSffNodeInPort(MatchBuilder match, final String sffNodeName, final Long portNo) {
+        match.setInPort(new NodeConnectorId(sffNodeName + ":" + portNo));
+    }
+
     // If we call multiple ethernet match methods, the MatchBuilder
     // EthernetMatch object gets overwritten each time, when we actually
     // want to set additional fields on the existing EthernetMatch object
diff --git a/sfcofl2/src/test/java/org/opendaylight/sfc/l2renderer/SfcL2FlowProgrammerTestMoc.java b/sfcofl2/src/test/java/org/opendaylight/sfc/l2renderer/SfcL2FlowProgrammerTestMoc.java
index 7961a3e..c44e206 100644
--- a/sfcofl2/src/test/java/org/opendaylight/sfc/l2renderer/SfcL2FlowProgrammerTestMoc.java
+++ b/sfcofl2/src/test/java/org/opendaylight/sfc/l2renderer/SfcL2FlowProgrammerTestMoc.java
@@ -21,6 +21,7 @@ public class SfcL2FlowProgrammerTestMoc implements SfcL2FlowProgrammerInterface
         configureVxlanGpeTransportIngressFlowMethodIndex,
         configureMplsTransportIngressFlowMethodIndex,
         configureArpTransportIngressFlowMethodIndex,
+        configureMetaPortIngressFlowMethodIndex,
 
         configureMacPathMapperFlowMethodIndex,
         configureMplsPathMapperFlowMethodIndex,
@@ -130,6 +131,10 @@ public class SfcL2FlowProgrammerTestMoc implements SfcL2FlowProgrammerInterface
         incrementMethodCalled(MethodIndeces.configureMplsTransportIngressFlowMethodIndex);
     }
 
+    @Override
+    public void configureMetaPortIngressFlow(String sffNodeName, Long ofPort) {
+        incrementMethodCalled(MethodIndeces.configureMetaPortIngressFlowMethodIndex);
+    }
     //---------------------------------------------
     //
     //            PathMapper methods
